enabled?:
  - exec_local: test ! -f $${checkpoint_disabled_file}
  - exec_local: test -f $KAMELEON_WORKDIR/MAIN_CONTAINER_ID

create:
  - exec_local: |
      set -e
      # Stop the current docker container, commit its image: that's the checkpointed image, remove the container
      docker stop $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null || docker kill $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
      docker commit $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) $${docker_image}:@microstep_id > /dev/null
      docker rm $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
      rm -f $KAMELEON_WORKDIR/MAIN_CONTAINER_ID
      docker run -d -u$${docker_user} -i -h $${docker_hostname} --cidfile $KAMELEON_WORKDIR/MAIN_CONTAINER_ID --privileged --entrypoint cat $${docker_image}:@microstep_id > /dev/null
      while ! [ -s $KAMELEON_WORKDIR/MAIN_CONTAINER_ID ] || ! docker exec -u $${docker_user} -i $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) true; do sleep 1; done
  - reload_context: out
  - exec_out: &1 |
      set -e
      if [ -e $KAMELEON_WORKDIR/.KAMELEON_MOUNT_SYSTEM_FS_IN_CHROOT ]; then
          mkdir -p $${rootfs_container_work_dir}/{dev,dev/pts,proc,sys}
          mount -t sysfs sysfs $${rootfs_container_work_dir}/sys
          mount -t proc proc $${rootfs_container_work_dir}/proc
          mount --bind /dev $${rootfs_container_work_dir}/dev
          mount --bind /dev/pts $${rootfs_container_work_dir}/dev/pts
      fi
  - reload_context: in

apply:
  - exec_local: |
      set -e
      # Untag images that are more recent than the checkpoint to apply.
      for i in $( docker image ls --format "{{.Repository}}:{{.Tag}}" --filter reference=$${docker_image} --filter since=$${docker_image}:@microstep_id ); do
        docker image rm -f $i #Just untag if image has sibblings, thanks to giving image Reporitory:Tag instead of ID.
      done || true
      # Stop and clean the container of context_out if running.
      if [ -r $KAMELEON_WORKDIR/MAIN_CONTAINER_ID ]; then
        if docker ps --no-trunc -a -q | grep -q $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID); then
          docker rm -f $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
        fi
        rm $KAMELEON_WORKDIR/MAIN_CONTAINER_ID
      fi
      docker run -d -u$${docker_user} -i -h $${docker_hostname} --cidfile $KAMELEON_WORKDIR/MAIN_CONTAINER_ID $${docker_extra_volumes} --privileged --entrypoint cat $${docker_image}:@microstep_id > /dev/null
      while ! [ -s $KAMELEON_WORKDIR/MAIN_CONTAINER_ID ] || ! docker exec -u $${docker_user} -i $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) true; do sleep 1; done
  - exec_out: *1

list:
  - exec_local: |
      docker image ls --format "{{.Tag}}" --filter reference=$${docker_image}

clear:
  - exec_local: |
      set -e
      # Clear docker images
      for i in $( docker image ls --format "{{.Repository}}:{{.Tag}}" --filter reference=$${docker_image} ); do
        docker image rm -f $i #Just untag if image has sibblings, thanks to giving image Reporitory:Tag instead of ID
      done || true
